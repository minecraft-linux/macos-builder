name: CI
on:
  push:
    branches:
    - main
  pull_request:
  workflow_call:
    inputs:
      submodule-refs:
        type: string
        default: "[]"
      mcpelauncher-repo:
        type: string
        default: https://github.com/minecraft-linux/mcpelauncher-manifest
      mcpelauncher-ref:
        type: string
        default: ${{ github.repository == 'minecraft-linux/mcpelauncher-manifest' && (github.sha || github.ref) || 'ng' }}
      mcpelauncher-ui-repo:
        type: string
        default: https://github.com/minecraft-linux/mcpelauncher-ui-manifest
      mcpelauncher-ui-ref:
        type: string
        default: ${{ github.repository == 'minecraft-linux/mcpelauncher-ui-manifest' && (github.sha || github.ref) || 'ng' }}
      msa-repo:
        type: string
        default: https://github.com/minecraft-linux/msa-manifest
      msa-ref:
        type: string
        default: ${{ github.repository == 'minecraft-linux/msa-manifest' && (github.sha || github.ref) || 'master' }}
jobs:
  build-libcxx32:
    runs-on: macos-latest
    steps:
    - name: Check Cache libcxx32
      id: libcxx32-llvm
      uses: ChristopherHX/check-cache@main
      env:
        cache-name: cache-libcxx32--macos-10-10-4
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx32
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-libcxx32--macos-10-10-4
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Build libcxx, libcxxabi
      if: steps.libcxx32-llvm.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.10.0
        export SDKROOT=${{ github.workspace }}/../MacOSX-SDKs/MacOSX10.10.sdk
        git clone https://github.com/llvm/llvm-project.git llvm -b release/10.x
        mkdir -p libcxx32-build
        cd libcxx32-build
        cmake ../llvm/llvm -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" -DCMAKE_BUILD_TYPE=Release -DLIBCXX_BUILD_32_BITS=ON -DLIBCXXABI_BUILD_32_BITS=ON -DLLVM_BUILD_32_BITS=ON
        make -j8 cxx cxxabi
  build-libcxx64:
    runs-on: macos-latest
    steps:
    - name: Check Cache libcxx64
      id: libcxx64-llvm
      uses: ChristopherHX/check-cache@main
      env:
        cache-name: cache-libcxx64--macos-10-10-4
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-libcxx64--macos-10-10-4
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
    - name: Build libcxx, libcxxabi
      if: steps.libcxx64-llvm.outputs.cache-hit != 'true'
      run: |
        export MACOSX_DEPLOYMENT_TARGET=10.10.0
        export SDKROOT=${{ github.workspace }}/../MacOSX-SDKs/MacOSX10.10.sdk
        git clone https://github.com/llvm/llvm-project.git llvm -b release/10.x
        mkdir -p libcxx64-build
        cd libcxx64-build
        cmake ../llvm/llvm -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" -DCMAKE_BUILD_TYPE=Release
        make -j8 cxx cxxabi
  build-libcxx:
    runs-on: macos-latest
    needs: [build-libcxx32,build-libcxx64]
    steps:
    - name: Check libcxx
      id: libcxx-llvm
      uses: ChristopherHX/check-cache@main
      env:
        cache-name: cache-libcxx--macos-10-10-4
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx32
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      id: libcxx32-llvm
      uses: actions/cache@v3
      env:
        cache-name: cache-libcxx32--macos-10-10-4
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      id: libcxx64-llvm
      uses: actions/cache@v3
      env:
        cache-name: cache-libcxx64--macos-10-10-4
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-libcxx--macos-10-10-4
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Build universal lib
      if: steps.libcxx-llvm.outputs.cache-hit != 'true'
      run: |
        mkdir -p libcxx-build/
        lipo -create libcxx32-build/lib/libc++.dylib libcxx64-build/lib/libc++.dylib -output libcxx-build/libc++.1.dylib
        lipo -create libcxx32-build/lib/libc++abi.dylib libcxx64-build/lib/libc++abi.dylib -output libcxx-build/libc++abi.1.dylib
        cd libcxx-build
        ln -s libc++.1.dylib libc++.dylib
        ln -s libc++abi.1.dylib libc++abi.dylib
        install_name_tool -rpath @loader_path/../lib @loader_path/../Frameworks libc++.dylib
        install_name_tool -rpath @loader_path/../lib @loader_path/../Frameworks libc++abi.dylib
  buildopenssl32:
    runs-on: macos-latest
    steps:
    - name: Check for openssl
      id: cache-openssl32
      uses: ChristopherHX/check-cache@main
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: ssl32
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      if: steps.cache-openssl32.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: ssl32
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: env.HAVE_SECRET && steps.cache-openssl32.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
      env:
        HAVE_SECRET: ${{ secrets.MacOSX1014sdk && '1' || '' }}
    - uses: actions/checkout@v1
      if: env.MISSING_SECRET && steps.cache-openssl32.outputs.cache-hit != 'true'
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
      env:
        MISSING_SECRET: ${{ !secrets.MacOSX1014sdk && '1' || '' }}
    - name: Update env
      if: steps.cache-openssl32.outputs.cache-hit != 'true'
      run: |
        echo MACOSX_DEPLOYMENT_TARGET=10.10.0 > $GITHUB_ENV
        echo SDKROOT=${{ github.workspace }}/../${{ secrets.MacOSX1014sdk && 'MacOSX10.14.sdk' || 'MacOSX-SDKs/MacOSX10.13.sdk' }} >> $GITHUB_ENV
    - name: Build OpenSSL
      if: steps.cache-openssl32.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/openssl/openssl.git -b OpenSSL_1_1_1-stable
        cd openssl
        KERNEL_BITS=32 ./config --prefix="$PWD/../ssl32"
        make -j8
        sudo make install_sw -j8
  buildopenssl64:
    runs-on: macos-latest
    steps:
    - name: Check for openssl
      id: cache-openssl64
      uses: ChristopherHX/check-cache@main
      env:
        cache-name: cache-openssl64-macos-10-10
      with:
        path: ssl64
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      if: steps.cache-openssl64.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-openssl64-macos-10-10
      with:
        path: ssl64
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: env.HAVE_SECRET && steps.cache-openssl64.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: 5d1c9b28f01ef0b01225f92670ee587b430efa8e
        token: ${{ secrets.MacOSX1014sdk }}
      env:
        HAVE_SECRET: ${{ secrets.MacOSX1014sdk && '1' || '' }}
    - uses: actions/checkout@v1
      if: env.MISSING_SECRET && steps.cache-openssl64.outputs.cache-hit != 'true'
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
      env:
        MISSING_SECRET: ${{ !secrets.MacOSX1014sdk && '1' || '' }}
    - name: Update env
      if: steps.cache-openssl64.outputs.cache-hit != 'true'
      run: |
        echo MACOSX_DEPLOYMENT_TARGET=10.10.0 > $GITHUB_ENV
        echo SDKROOT=${{ github.workspace }}/../${{ secrets.MacOSX1014sdk && 'MacOSX10.14.sdk' || 'MacOSX-SDKs/MacOSX10.13.sdk' }} >> $GITHUB_ENV
    
    - name: Build OpenSSL
      if: steps.cache-openssl64.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/openssl/openssl.git -b OpenSSL_1_1_1-stable
        cd openssl
        KERNEL_BITS=64 ./config --prefix="$PWD/../ssl64"
        make -j8
        sudo make install_sw -j8
  buildopenssl:
    runs-on: macos-latest
    needs: [buildopenssl32, buildopenssl64]
    steps:
    - name: Check openssl
      id: openssl
      uses: ChristopherHX/check-cache@main
      env:
        cache-name: cache-openssl-2
      with:
        path: ssl
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      if: steps.openssl.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-openssl-2
      with:
        path: ssl
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl32
      if: steps.openssl.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: ssl32
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl64
      if: steps.openssl.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-openssl64-macos-10-10
      with:
        path: ssl64
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Build universal lib
      if: steps.openssl.outputs.cache-hit != 'true'
      run: |
        mkdir -p ssl/lib
        lipo -create ssl32/lib/libssl.dylib ssl64/lib/libssl.dylib -output ssl/lib/libssl.dylib
        lipo -create ssl32/lib/libcrypto.dylib ssl64/lib/libcrypto.dylib -output ssl/lib/libcrypto.dylib
        cd ssl/lib
        install_name_tool -id @rpath/libssl.dylib -add_rpath @loader_path/../Frameworks libssl.dylib
        install_name_tool -id @rpath/libcrypto.dylib -add_rpath @loader_path/../Frameworks libcrypto.dylib
  buildangle:
    runs-on: macos-latest
    # needs: [buildangle32, buildangle64]
    steps:
    - name: Check angle
      id: angle
      uses: ChristopherHX/check-cache@main
      env:
        cache-name: cache-angle-3
      with:
        path: source/osx-angle-ci/artifacts
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache angle
      if: steps.angle.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-angle-3
      with:
        path: source/osx-angle-ci/artifacts
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - uses: actions/checkout@v1
      if: env.HAVE_SECRET && steps.angle.outputs.cache-hit != 'true'
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: eea27130a21aea7605cd019e5a45369535bec800
        token: ${{ secrets.MacOSX1014sdk }}
      env:
        HAVE_SECRET: ${{ secrets.MacOSX1014sdk && '1' || '' }}
    - uses: actions/checkout@v1
      if: env.MISSING_SECRET && steps.angle.outputs.cache-hit != 'true'
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
      env:
        MISSING_SECRET: ${{ !secrets.MacOSX1014sdk && '1' || '' }}
    - name: Update env
      if: steps.angle.outputs.cache-hit != 'true'
      run: |
        echo MACOSX_DEPLOYMENT_TARGET=10.10.0 > $GITHUB_ENV
        echo SDKROOT=${{ github.workspace }}/../${{ secrets.MacOSX1014sdk && 'MacOSX10.14.sdk' || 'MacOSX-SDKs/MacOSX10.13.sdk' }} >> $GITHUB_ENV
    - name: build angle
      if: steps.angle.outputs.cache-hit != 'true'
      run: |
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        export PATH=$PATH:$PWD/depot_tools
        git clone https://github.com/minecraft-linux/angle.git
        pushd angle
        python scripts/bootstrap.py
        gclient sync
        gn gen out/Release --args='target_cpu="x86" is_debug=false mac_sdk_path="'"${SDKROOT}"'" mac_sdk_min="10.10.0" mac_min_system_version="10.10.0" mac_deployment_target="10.10.0" angle_enable_metal=false angle_enable_swiftshader=false angle_enable_vulkan=false treat_warnings_as_errors=false fatal_linker_warnings=false'
        autoninja -C out/Release libEGL libGLESv2
        gn gen out/Release64 --args='is_debug=false mac_sdk_path="'"${SDKROOT}"'" mac_sdk_min="10.10.0" mac_min_system_version="10.10.0" mac_deployment_target="10.10.0" angle_enable_gl=false angle_enable_metal=true angle_enable_swiftshader=false angle_enable_vulkan=false treat_warnings_as_errors=false fatal_linker_warnings=false'
        autoninja -C out/Release64 libEGL libGLESv2
        popd
    - name: upload
      if: steps.angle.outputs.cache-hit != 'true'
      run: |
        mkdir -p source/osx-angle-ci/artifacts
        lipo -create angle/out/Release/libEGL.dylib angle/out/Release64/libEGL.dylib -output ./source/osx-angle-ci/artifacts/libEGL.dylib
        lipo -create angle/out/Release/libGLESv2.dylib angle/out/Release64/libGLESv2.dylib -output ./source/osx-angle-ci/artifacts/libGLESv2.dylib
    # - uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.x'
    #     architecture: 'x64'
    #   if: steps.angle.outputs.cache-hit != 'true'
    # - run: |
    #     mkdir -p source/osx-angle-ci/artifacts
    #   if: steps.angle.outputs.cache-hit != 'true'
    # - run: |
    #     from subprocess import check_call as call
    #     import shutil
    #     from os import path
    #     DMG_MOUNT_PATH = '/Volumes/Minecraft Bedrock Launcher/'
    #     DMG_FILE = 'Minecraft Bedrock Launcher.dmg'
    #     call(['curl', '-sL', '-o', DMG_FILE, 'https://github.com/ChristopherHX/osx-packaging-scripts/releases/download/v0.3.0.1-352/Minecraft_Bedrock_Launcher_v0.3.0.1-macOS-x86_64-0.0.352_macOS_10.10.0.dmg'])
    #     call(['hdiutil', 'attach', '-noautoopen', '-mountpoint', DMG_MOUNT_PATH, '-quiet', DMG_FILE])
    #     shutil.copy2(path.join(DMG_MOUNT_PATH, 'Minecraft Bedrock Launcher.app', 'Contents', 'Frameworks', 'libEGL.dylib'), './source/osx-angle-ci/artifacts/libEGL.dylib', follow_symlinks = True)
    #     shutil.copy2(path.join(DMG_MOUNT_PATH, 'Minecraft Bedrock Launcher.app', 'Contents', 'Frameworks', 'libGLESv2.dylib'), './source/osx-angle-ci/artifacts/libGLESv2.dylib', follow_symlinks = True)
    #   shell: python
    #   if: steps.angle.outputs.cache-hit != 'true'
  build:
    runs-on: macos-latest
    needs: [build-libcxx, buildopenssl, buildangle]
    permissions:
      id-token: write # required to get an oidc token
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: "10.10.0"
            micro: 0
            QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_592/
            QT_VERSION_SHORT: 5.9.2
            QT_VERSION: 5.9.2-0-201710050729
            QT_PACKAGE_PREFIX: qt.592.
            QT_PACKAGE_SUFFIX: clang_64
            QT_PREBUILT_SUFFIX: -MacOS-OSX_10_10-Clang-MacOS-OSX_10_10-X86_64
            extraflags: "--qtworkaround"
          - target: "10.12.0"
            micro: 1
            QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_5113/
            QT_VERSION_SHORT: 5.11.3
            QT_VERSION: 5.11.3-0-201811291904
            QT_PACKAGE_PREFIX: qt.qt5.5113.
            QT_PACKAGE_SUFFIX: clang_64
            QT_PREBUILT_SUFFIX: -MacOS-MacOS_10_12-Clang-MacOS-MacOS_10_12-X86_64
          - target: "10.13.0"
            micro: 2
            QT_BASE_URL: http://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt5_5150/
            QT_VERSION_SHORT: 5.15.0
            QT_VERSION: 5.15.0-0-202005140805
            QT_PACKAGE_PREFIX: qt.qt5.5150.
            QT_PACKAGE_SUFFIX: clang_64
            QT_PREBUILT_SUFFIX: -MacOS-MacOS_10_13-Clang-MacOS-MacOS_10_13-X86_64
    steps:
    - uses: ChristopherHX/oidc@f8f35d97bc37ffbe779bb3ab8453920fedf6fb37
      id: oidc
      continue-on-error: true
    - uses: actions/checkout@v3
      with:
        repository: ${{ steps.oidc.outputs.job_workflow_repo_name_and_owner || inputs.submodule-refs && 'ChristopherHX/osx-packaging-scripts' || github.repository }}
        ref: ${{ steps.oidc.outputs.job_workflow_repo_ref || inputs.submodule-refs && 'main' || github.sha || github.ref }}
    - name: Sync Submodule Sources
      if: ${{ inputs.submodule-refs }}
      uses: actions/github-script@v6
      with:
        github-token: none
        script: |
          var downloadRepo = async function(path, repo, ref) {
            await io.mkdirP(path);
            await exec.exec("git", ["init"], { cwd: path });
            await exec.exec("git", ["remote", "add", "origin", repo], { cwd: path });
            await exec.exec("git", ["fetch", "origin", ref], { cwd: path });
            await exec.exec("git", ["reset", "--hard", "FETCH_HEAD"], { cwd: path });
            await exec.exec("git", ["submodule", "update", "--init", "--recursive"], { cwd: path });
          };
          await downloadRepo("source/mcpelauncher", process.env.MCPELAUNCHER_REPO, process.env.MCPELAUNCHER_REF);
          await downloadRepo("source/mcpelauncher-ui", process.env.MCPELAUNCHER_UI_REPO, process.env.MCPELAUNCHER_UI_REF);
          await downloadRepo("source/msa", process.env.MSA_REPO, process.env.MSA_REF);
          var submoduleRefs = JSON.parse(process.env.SUBMODULEREFS);
          for(var submoduleRef of submoduleRefs) {
            await exec.exec("git", ["fetch", submoduleRef.origin || "origin", submoduleRef.ref], { cwd: `source/${submoduleRef.project}/${submoduleRef.path}` });
            await exec.exec("git", ["checkout", "FETCH_HEAD"], { cwd: `source/${submoduleRef.project}/${submoduleRef.path}` });
          }
      env:
        SUBMODULEREFS: ${{ inputs.submodule-refs }}
        MCPELAUNCHER_REPO: ${{ inputs.mcpelauncher-repo }}
        MCPELAUNCHER_REF: ${{ inputs.mcpelauncher-ref }}
        MCPELAUNCHER_UI_REPO: ${{ inputs.mcpelauncher-ui-repo }}
        MCPELAUNCHER_UI_REF: ${{ inputs.mcpelauncher-ui-ref }}
        MSA_REPO: ${{ inputs.msa-repo }}
        MSA_REF: ${{ inputs.msa-ref }}
        
    - name: Cache libcxx32
      id: libcxx32-llvm
      uses: actions/cache@v3
      env:
        cache-name: cache-libcxx32--macos-10-10-4
      with:
        path: libcxx32-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx64
      id: libcxx64-llvm
      uses: actions/cache@v3
      env:
        cache-name: cache-libcxx64--macos-10-10-4
      with:
        path: libcxx64-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache libcxx
      id: libcxx-llvm
      uses: actions/cache@v3
      env:
        cache-name: cache-libcxx--macos-10-10-4
      with:
        path: libcxx-build
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl
      uses: actions/cache@v3
      env:
        cache-name: cache-openssl-2
      with:
        path: ssl
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl32
      uses: actions/cache@v3
      env:
        cache-name: cache-openssl32-macos-10-10
      with:
        path: ssl32
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Cache openssl64
      uses: actions/cache@v3
      env:
        cache-name: cache-openssl64-macos-10-10
      with:
        path: ssl64
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: patch ssl
      run: |
        cd ssl32
        rm -rf lib
        ln -s ../ssl/lib
        cd ../ssl64
        rm -rf lib
        ln -s ../ssl/lib
    - name: Cache angle
      if: steps.angle.outputs.cache-hit != 'true'
      uses: actions/cache@v3
      env:
        cache-name: cache-angle-3
      with:
        path: source/osx-angle-ci/artifacts
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: brew install / link
      run: |
        brew install p7zip automake
      env:
        HOMEBREW_NO_AUTO_UPDATE: 1
    - name: Cache qt
      if: 'false'
      id: cache-qt
      uses: actions/cache@v3
      env:
        cache-name: cache-qt-macos-${{ matrix.target }}
      with:
        path: qt
        key: ${{ runner.os }}-build-${{ env.cache-name }}
    - name: Download Qt
      # if: steps.cache-qt.outputs.cache-hit != 'true'
      run: |
        ./download_qt.sh
      env:
        QT_BASE_URL: ${{ matrix.QT_BASE_URL }}
        QT_VERSION_SHORT: ${{ matrix.QT_VERSION_SHORT }}
        QT_VERSION: ${{ matrix.QT_VERSION }}
        QT_PACKAGE_PREFIX: ${{ matrix.QT_PACKAGE_PREFIX }}
        QT_PACKAGE_SUFFIX: ${{ matrix.QT_PACKAGE_SUFFIX }}
        QT_PREBUILT_SUFFIX: ${{ matrix.QT_PREBUILT_SUFFIX }}
    - uses: actions/checkout@v1
      if: env.HAVE_SECRET
      with:
        repository: ChristopherHX/MacOSX10.14.sdk
        ref: eea27130a21aea7605cd019e5a45369535bec800
        token: ${{ secrets.MacOSX1014sdk }}
      env:
        HAVE_SECRET: ${{ secrets.MacOSX1014sdk && '1' || '' }}
    - uses: actions/checkout@v1
      if: env.MISSING_SECRET
      with:
        repository: phracker/MacOSX-SDKs
        ref: refs/heads/master
      env:
        MISSING_SECRET: ${{ !secrets.MacOSX1014sdk && '1' || '' }}
    - name: Update env
      run: |
        echo MACOSX_DEPLOYMENT_TARGET=${{ matrix.target }} > $GITHUB_ENV
        echo SDKROOT=${{ github.workspace }}/../${{ secrets.MacOSX1014sdk && 'MacOSX10.14.sdk' || 'MacOSX-SDKs/MacOSX10.13.sdk' }} >> $GITHUB_ENV
    - name: Get Source libzip
      run: |
        git clone https://github.com/nih-at/libzip libzip
        git -C libzip checkout v1.9.2
    - name: Build libzip
      run: |
        cmake libzip -B libzip-build -DBUILD_TOOLS=OFF -DBUILD_REGRESS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_DOC=OFF -DENABLE_BZIP2=OFF -DENABLE_LZMA=OFF -DENABLE_ZSTD=OFF -DENABLE_COMMONCRYPTO=OFF -DENABLE_GNUTLS=OFF -DENABLE_MBEDTLS=OFF -DENABLE_OPENSSL=OFF -DENABLE_WINDOWS_CRYPTO=OFF -DENABLE_FDOPEN=OFF
        cmake --build libzip-build --parallel
        sudo cmake --build libzip-build --target install --parallel
    - name: Install python dependencies
      run: pip3 install jinja2 ds_store

    - name: Install brew dependencies
      run: |
        brew install autoconf || :
        brew install automake || :
        brew install libtool || :
    - name: Get Source Protobuf
      run: |
        git clone https://github.com/protocolbuffers/protobuf.git -b 21.x protobuf
        git -C protobuf submodule update --init --recursive
    - name: Build Protobuf
      run: |
        ./autogen.sh
        ./configure
        make -j8
        sudo make install -j8
      working-directory: protobuf
    - name: Build
      run: |
        python3 __main__.py --qt-path qt/*/*${{ secrets.SPARKLE_ECDSA_PUB && format('{0} {1}', ' --update-sparkle-appcast https://github.com/${GITHUB_REPOSITORY}/releases/download/ng.dmg/appcast.xml --update-sparkle-ed-public-key ', secrets.SPARKLE_ECDSA_PUB) }} --buildangle --build-id ${GITHUB_RUN_NUMBER} --prettyversion "$(cat version.txt)-macOS-x86_64-0.${{ matrix.micro }}.${GITHUB_RUN_NUMBER}" --version "0.${{ matrix.micro }}.${GITHUB_RUN_NUMBER}" ${{ matrix.extraflags }}${{ inputs.submodule-refs && ' --skip-sync-sources' || '' }}
    - name: Build .dmg
      run: python3 build_dmg.py
    - name: Generate Dist
      run: |
        DMG_FILENAME="Minecraft_Bedrock_Launcher_$(cat version.txt)-macOS-x86_64-0.${{ matrix.micro }}.${GITHUB_RUN_NUMBER}_macOS_${{ matrix.target }}.dmg"
        mkdir -p dist
        mv "${{ github.workspace }}/output/Minecraft Bedrock Launcher.dmg" "dist/${DMG_FILENAME}"
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.target }}
        path: dist
  publish:
    runs-on: macos-latest
    needs: build
    # Eventually extend this job to be able to run on other repositories, otherwise replace the owner and repository name in this job
    if: ${{ !cancelled() && github.server_url == 'https://github.com' && github.repository == 'ChristopherHX/osx-packaging-scripts' }}
    steps:
    - uses: actions/checkout@v2
    - run: echo "DMG_VERSION=$(cat version.txt)" >> $GITHUB_ENV
    - name: Download everything
      uses: actions/download-artifact@v3
      with:
        path: sparkle
    - name: Download sparkle
      run: |
        curl -L -C - -o sparkle.tar.xz https://github.com/sparkle-project/Sparkle/releases/download/1.26.0/Sparkle-1.26.0.tar.xz
        tar -xf ./sparkle.tar.xz
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Download some old dmg's and generate deltas
      shell: python
      run: |
        from os import makedirs, fsencode, fsdecode, listdir, path, rename, getenv
        import xml.etree.ElementTree as ET
        from subprocess import check_call
        makedirs('dist')
        makedirs('dist2')
        check_call(['curl', '-L', '-o', path.abspath(path.join('sparkle', 'appcast.xml')), 'https://github.com/ChristopherHX/osx-packaging-scripts/releases/download/ng.dmg/appcast.xml'])
        tree = ET.parse(path.join('sparkle', 'appcast.xml'))
        root = tree.getroot()
        i = 0
        for rank in root.iter('item'):
            enc = rank.find('enclosure')
            url = enc.get('url')
            check_call(['curl', '-L', '-o', path.abspath(path.join('sparkle', url[url.rfind('/')+1:])), url])
        
        directory = fsencode('sparkle')
        for file in listdir(directory):
            filename = fsdecode(file)
            if filename.endswith(".dmg"):
                print(filename)
                macindex = filename.rindex('macOS_') + 6
                if macindex == 5:
                    continue
                destdirname = path.join('sparkle', filename[macindex:len(filename)-4])
                print(destdirname)
                if not path.isdir(destdirname):
                    makedirs(destdirname)
                rename(path.join('sparkle', filename), path.join(destdirname, filename))

        tagname = 'invalid'
        with open('version.txt', 'r') as file:
            tagname = file.read().replace('\n', '') + '-' + getenv('GITHUB_RUN_NUMBER')

        print(tagname)
        def dumpfile(f):
            print('dumpfile: ' + f)
            with open(f, 'r') as file:
                print(file.read())
        
        for file in listdir(directory):
            ver = path.join('sparkle', fsdecode(file))
            if not path.isdir(ver):
                continue
            print(ver)
            dumpfile(path.join('sparkle', 'appcast.xml'))
            rename(path.join('sparkle', 'appcast.xml'), path.join(ver, 'appcast.xml'))
            dumpfile(path.join(ver, 'appcast.xml'))
            check_call(['./bin/generate_appcast', '-s', '${{ secrets.SPARKLE_ECDSA }}', '--download-url-prefix', 'https://github.com/ChristopherHX/osx-packaging-scripts/releases/download/' + tagname + '/', ver ])
            dumpfile(path.join(ver, 'appcast.xml'))
            rename(path.join(ver, 'appcast.xml'), path.join('sparkle', 'appcast.xml'))
            dumpfile(path.join('sparkle', 'appcast.xml'))
            for file in listdir(ver):
                filename = fsdecode(file)
                if filename.endswith(".delta") or (filename.endswith(".dmg") and filename.find(getenv('GITHUB_RUN_NUMBER') + '_macOS_') != -1):
                    print(filename)
                    rename(path.join(ver, filename), path.join('dist2', filename))
        
        def register_all_namespaces(filename):
            namespaces = dict([node for _, node in ET.iterparse(filename, events=['start-ns'])])
            for ns in namespaces:
                ET.register_namespace(ns, namespaces[ns])
        
        dumpfile(path.join('sparkle', 'appcast.xml'))
        register_all_namespaces(path.join('sparkle', 'appcast.xml'))
        # Revert url changes
        tree2 = ET.parse(path.join('sparkle', 'appcast.xml'))
        root2 = tree2.getroot()
        for rank in root2.iter('item'):
            enc = rank.find('enclosure')
            title = rank.find('title').text
            for rank2 in root.iter('item'):
                if title == rank2.find('title').text:
                    enc.set('url', rank2.find('enclosure').get('url'))
                    print(enc.get('url'))
                    break
        tree2.write(path.join('dist', 'appcast.xml'), encoding='utf-8', xml_declaration=True)
        dumpfile(path.join('dist', 'appcast.xml'))
        tree2.write(path.join('dist2', 'appcast.xml'), encoding='utf-8', xml_declaration=True)
    - name: download ghr
      run: |
        curl -L https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_darwin_amd64.zip --output ghr.zip
        unzip ghr.zip
    - name: Upload ${{ github.ref == 'refs/heads/main' && 'Latest' || 'Draft' }}
      run: |
        ./ghr*/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ChristopherHX -r osx-packaging-scripts ${{ github.ref == 'refs/heads/main' && '' || '-draft ' }}-b "$LAUNCHER_RELEASE_DESCRIPTION$(cat changelog.txt)" "$(cat version.txt)-${GITHUB_RUN_NUMBER}" dist2/
      env:
        LAUNCHER_RELEASE_DESCRIPTION: |
          **You need to own Minecraft on the google play store and login with your google account to use this launcher**
          Links for linux flatpak or AppImage can be found on our wiki https://mcpelauncher.readthedocs.io.

          [Download link for intel or amd based 64bit systems ( known as amd64, intel64 and x86_64 e.g. most PC's or Laptops )](https://github.com/ChristopherHX/osx-packaging-scripts/releases/download/${{env.DMG_VERSION}}-${{github.run_number}}/Minecraft_Bedrock_Launcher_${{env.DMG_VERSION}}-macOS-x86_64-0.2.${{github.run_number}}_macOS_10.13.0.dmg)

          We don't support macOS 10.10 - 10.12, but are still providing releases for them under assets.

          **We don't own any m1 macs so this Launcher doesn't support macOS arm64 and you need to install Rosetta 2 to run the intel version under x86_64 emulation**
          - Compiling for apple m1 ok
            - since linux/arm64 support where added 2020/10
          - Loading android libraries **broken**
            - we received a crash report, mmap returned map failed
            - unable to debug mmap failure's without access to m1 hardware
            - No m1 ci on github actions

          No free opengl es 2/3 drivers other than google/angle for macOS, leads to some graphic anomalies
          - glowing sheeps, spiders and enchanted stuff
            - the macOS dark mode might help a little bit
            - lower resolutions reduce this glitch
          - possible more frame drops compared to linux

          No sound on unsupported ancient mac's from pre 2012 in i386 compatibility mode

          ### Changelog
    - name: Publish release
      if: github.ref == 'refs/heads/main'
      run: |
        ./ghr*/ghr -t ${{ secrets.GITHUB_TOKEN }} -u ChristopherHX -r osx-packaging-scripts -replace ng.dmg dist/
